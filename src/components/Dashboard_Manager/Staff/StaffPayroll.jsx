import React, { useState } from "react";
import "./StaffPayroll.scss";

const StaffPayroll = () => {
  const [selectedMonth, setSelectedMonth] = useState(
    new Date().toISOString().slice(0, 7)
  );
  const [filterDepartment, setFilterDepartment] = useState("all");

  // Mock payroll data
  const payrollData = [
    {
      id: 1,
      staffId: 1,
      name: "Nguy·ªÖn VƒÉn A",
      position: "B·∫øp tr∆∞·ªüng",
      department: "B·∫øp",
      avatar: "üë®‚Äçüç≥",
      baseSalary: 15000000,
      workingDays: 26,
      totalDays: 26,
      overtimeHours: 12,
      overtimeRate: 50000,
      bonus: 2000000,
      deductions: 500000,
      insurance: 1200000,
      tax: 1800000,
      netSalary: 15510000,
      status: "paid",
    },
    {
      id: 2,
      staffId: 2,
      name: "Tr·∫ßn Th·ªã B",
      position: "Ph·ª•c v·ª• tr∆∞·ªüng",
      department: "Ph·ª•c v·ª•",
      avatar: "üë©‚Äçüíº",
      baseSalary: 12000000,
      workingDays: 24,
      totalDays: 26,
      overtimeHours: 8,
      overtimeRate: 40000,
      bonus: 1000000,
      deductions: 200000,
      insurance: 960000,
      tax: 1200000,
      netSalary: 11160000,
      status: "pending",
    },
    {
      id: 3,
      staffId: 3,
      name: "L√™ VƒÉn C",
      position: "Thu ng√¢n",
      department: "Thu ng√¢n",
      avatar: "üë®‚Äçüíº",
      baseSalary: 9000000,
      workingDays: 26,
      totalDays: 26,
      overtimeHours: 4,
      overtimeRate: 35000,
      bonus: 500000,
      deductions: 0,
      insurance: 720000,
      tax: 800000,
      netSalary: 8420000,
      status: "paid",
    },
    {
      id: 4,
      staffId: 4,
      name: "Ph·∫°m Th·ªã D",
      position: "Ph·ª•c v·ª•",
      department: "Ph·ª•c v·ª•",
      avatar: "üë©‚Äçüç≥",
      baseSalary: 8000000,
      workingDays: 22,
      totalDays: 26,
      overtimeHours: 0,
      overtimeRate: 30000,
      bonus: 300000,
      deductions: 100000,
      insurance: 640000,
      tax: 600000,
      netSalary: 6760000,
      status: "pending",
    },
  ];

  const departments = ["T·∫•t c·∫£", "B·∫øp", "Ph·ª•c v·ª•", "Thu ng√¢n", "Qu·∫£n l√Ω"];

  const payrollSummary = {
    totalStaff: payrollData.length,
    totalBaseSalary: payrollData.reduce((sum, p) => sum + p.baseSalary, 0),
    totalBonus: payrollData.reduce((sum, p) => sum + p.bonus, 0),
    totalDeductions: payrollData.reduce((sum, p) => sum + p.deductions, 0),
    totalNetSalary: payrollData.reduce((sum, p) => sum + p.netSalary, 0),
    paidCount: payrollData.filter((p) => p.status === "paid").length,
    pendingCount: payrollData.filter((p) => p.status === "pending").length,
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount);
  };

  const getStatusConfig = (status) => {
    const configs = {
      paid: { label: "ƒê√£ tr·∫£", class: "success", icon: "fas fa-check-circle" },
      pending: { label: "Ch·ªù tr·∫£", class: "warning", icon: "fas fa-clock" },
      processing: {
        label: "ƒêang x·ª≠ l√Ω",
        class: "info",
        icon: "fas fa-spinner",
      },
    };
    return (
      configs[status] || {
        label: status,
        class: "secondary",
        icon: "fas fa-question",
      }
    );
  };

  const calculateGrossSalary = (record) => {
    const dailySalary = record.baseSalary / record.totalDays;
    const workingSalary = dailySalary * record.workingDays;
    const overtimePay = record.overtimeHours * record.overtimeRate;
    return workingSalary + overtimePay + record.bonus;
  };

  const filteredPayroll = payrollData.filter((record) => {
    return filterDepartment === "all" || record.department === filterDepartment;
  });

  return (
    <div className="staff-payroll">
      {/* Header */}
      <div className="payroll-header">
        <div className="header-left">
          <h2>B·∫£ng l∆∞∆°ng nh√¢n vi√™n</h2>
          <p>
            Qu·∫£n l√Ω l∆∞∆°ng v√† th∆∞·ªüng cho th√°ng{" "}
            {new Date(selectedMonth).toLocaleDateString("vi-VN", {
              month: "long",
              year: "numeric",
            })}
          </p>
        </div>
        <div className="header-controls">
          <input
            type="month"
            value={selectedMonth}
            onChange={(e) => setSelectedMonth(e.target.value)}
            className="month-picker"
          />
          <select
            value={filterDepartment}
            onChange={(e) => setFilterDepartment(e.target.value)}
            className="department-filter"
          >
            {departments.map((dept) => (
              <option key={dept} value={dept === "T·∫•t c·∫£" ? "all" : dept}>
                {dept}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="payroll-summary">
        <div className="summary-card summary-card--primary">
          <div className="summary-icon">
            <i className="fas fa-users" />
          </div>
          <div className="summary-content">
            <h3>{payrollSummary.totalStaff}</h3>
            <p>T·ªïng nh√¢n vi√™n</p>
          </div>
        </div>

        <div className="summary-card summary-card--success">
          <div className="summary-icon">
            <i className="fas fa-money-bill-wave" />
          </div>
          <div className="summary-content">
            <h3>{formatCurrency(payrollSummary.totalNetSalary)}</h3>
            <p>T·ªïng l∆∞∆°ng th·ª±c nh·∫≠n</p>
          </div>
        </div>

        <div className="summary-card summary-card--warning">
          <div className="summary-icon">
            <i className="fas fa-gift" />
          </div>
          <div className="summary-content">
            <h3>{formatCurrency(payrollSummary.totalBonus)}</h3>
            <p>T·ªïng th∆∞·ªüng</p>
          </div>
        </div>

        <div className="summary-card summary-card--info">
          <div className="summary-icon">
            <i className="fas fa-check-circle" />
          </div>
          <div className="summary-content">
            <h3>
              {payrollSummary.paidCount}/{payrollSummary.totalStaff}
            </h3>
            <p>ƒê√£ thanh to√°n</p>
          </div>
        </div>
      </div>

      {/* Payroll Table */}
      <div className="payroll-table-container">
        <div className="table-header">
          <h3>Chi ti·∫øt b·∫£ng l∆∞∆°ng</h3>
          <div className="table-actions">
            <button className="btn btn--secondary">
              <i className="fas fa-file-excel" />
              Xu·∫•t Excel
            </button>
            <button className="btn btn--success">
              <i className="fas fa-calculator" />
              T√≠nh l∆∞∆°ng
            </button>
            <button className="btn btn--primary">
              <i className="fas fa-credit-card" />
              Thanh to√°n h√†ng lo·∫°t
            </button>
          </div>
        </div>

        <div className="payroll-table">
          <table>
            <thead>
              <tr>
                <th>Nh√¢n vi√™n</th>
                <th>L∆∞∆°ng c∆° b·∫£n</th>
                <th>Ng√†y c√¥ng</th>
                <th>TƒÉng ca</th>
                <th>Th∆∞·ªüng</th>
                <th>Kh·∫•u tr·ª´</th>
                <th>B·∫£o hi·ªÉm</th>
                <th>Thu·∫ø</th>
                <th>Th·ª±c nh·∫≠n</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {filteredPayroll.map((record) => {
                const statusConfig = getStatusConfig(record.status);
                const grossSalary = calculateGrossSalary(record);

                return (
                  <tr key={record.id}>
                    <td>
                      <div className="staff-info">
                        <span className="staff-avatar">{record.avatar}</span>
                        <div className="staff-details">
                          <span className="staff-name">{record.name}</span>
                          <span className="staff-position">
                            {record.position}
                          </span>
                        </div>
                      </div>
                    </td>
                    <td>
                      <span className="salary-amount">
                        {formatCurrency(record.baseSalary)}
                      </span>
                    </td>
                    <td>
                      <div className="working-days">
                        <span className="days-worked">
                          {record.workingDays}
                        </span>
                        <span className="days-total">/{record.totalDays}</span>
                      </div>
                    </td>
                    <td>
                      <div className="overtime-info">
                        <span className="overtime-hours">
                          {record.overtimeHours}h
                        </span>
                        <span className="overtime-amount">
                          {formatCurrency(
                            record.overtimeHours * record.overtimeRate
                          )}
                        </span>
                      </div>
                    </td>
                    <td>
                      <span className="bonus-amount">
                        {formatCurrency(record.bonus)}
                      </span>
                    </td>
                    <td>
                      <span className="deduction-amount">
                        {formatCurrency(record.deductions)}
                      </span>
                    </td>
                    <td>
                      <span className="insurance-amount">
                        {formatCurrency(record.insurance)}
                      </span>
                    </td>
                    <td>
                      <span className="tax-amount">
                        {formatCurrency(record.tax)}
                      </span>
                    </td>
                    <td>
                      <span className="net-salary">
                        {formatCurrency(record.netSalary)}
                      </span>
                    </td>
                    <td>
                      <span
                        className={`status-badge status-badge--${statusConfig.class}`}
                      >
                        <i className={statusConfig.icon} />
                        {statusConfig.label}
                      </span>
                    </td>
                    <td>
                      <div className="action-buttons">
                        <button className="action-btn" title="Xem chi ti·∫øt">
                          <i className="fas fa-eye" />
                        </button>
                        <button className="action-btn" title="Ch·ªânh s·ª≠a">
                          <i className="fas fa-edit" />
                        </button>
                        {record.status === "pending" && (
                          <button
                            className="action-btn action-btn--success"
                            title="Thanh to√°n"
                          >
                            <i className="fas fa-credit-card" />
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>

      {/* Payroll Actions */}
      <div className="payroll-actions">
        <h3>Thao t√°c b·∫£ng l∆∞∆°ng</h3>
        <div className="action-grid">
          <button className="payroll-action-card">
            <i className="fas fa-calculator" />
            <div className="action-content">
              <h4>T√≠nh l∆∞∆°ng t·ª± ƒë·ªông</h4>
              <p>T√≠nh to√°n l∆∞∆°ng d·ª±a tr√™n ch·∫•m c√¥ng</p>
            </div>
          </button>

          <button className="payroll-action-card">
            <i className="fas fa-plus-circle" />
            <div className="action-content">
              <h4>Th√™m th∆∞·ªüng/ph·∫°t</h4>
              <p>ƒêi·ªÅu ch·ªânh th∆∞·ªüng v√† kh·∫•u tr·ª´</p>
            </div>
          </button>

          <button className="payroll-action-card">
            <i className="fas fa-file-invoice" />
            <div className="action-content">
              <h4>T·∫°o phi·∫øu l∆∞∆°ng</h4>
              <p>In phi·∫øu l∆∞∆°ng cho nh√¢n vi√™n</p>
            </div>
          </button>

          <button className="payroll-action-card">
            <i className="fas fa-chart-bar" />
            <div className="action-content">
              <h4>B√°o c√°o l∆∞∆°ng</h4>
              <p>Th·ªëng k√™ chi ph√≠ nh√¢n s·ª±</p>
            </div>
          </button>
        </div>
      </div>
    </div>
  );
};

export default StaffPayroll;
